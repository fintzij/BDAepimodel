// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// buildEigenArray_SIR
void buildEigenArray_SIR(arma::mat& real_eigenvals, arma::mat& imag_eigenvals, arma::cube& eigenvecs, arma::cube& inversevecs, arma::cube& irm_array, Rcpp::IntegerVector& n_real_eigs, bool initial_calc);
RcppExport SEXP BDAepimodel_buildEigenArray_SIR(SEXP real_eigenvalsSEXP, SEXP imag_eigenvalsSEXP, SEXP eigenvecsSEXP, SEXP inversevecsSEXP, SEXP irm_arraySEXP, SEXP n_real_eigsSEXP, SEXP initial_calcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type real_eigenvals(real_eigenvalsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type imag_eigenvals(imag_eigenvalsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eigenvecs(eigenvecsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type inversevecs(inversevecsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type irm_array(irm_arraySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type n_real_eigs(n_real_eigsSEXP);
    Rcpp::traits::input_parameter< bool >::type initial_calc(initial_calcSEXP);
    buildEigenArray_SIR(real_eigenvals, imag_eigenvals, eigenvecs, inversevecs, irm_array, n_real_eigs, initial_calc);
    return R_NilValue;
END_RCPP
}
// buildEigenArray_SEIR
void buildEigenArray_SEIR(arma::mat& real_eigenvals, arma::mat& imag_eigenvals, arma::cube& eigenvecs, arma::cube& inversevecs, arma::cube& irm_array, Rcpp::IntegerVector& n_real_eigs, bool initial_calc);
RcppExport SEXP BDAepimodel_buildEigenArray_SEIR(SEXP real_eigenvalsSEXP, SEXP imag_eigenvalsSEXP, SEXP eigenvecsSEXP, SEXP inversevecsSEXP, SEXP irm_arraySEXP, SEXP n_real_eigsSEXP, SEXP initial_calcSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type real_eigenvals(real_eigenvalsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type imag_eigenvals(imag_eigenvalsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eigenvecs(eigenvecsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type inversevecs(inversevecsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type irm_array(irm_arraySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type n_real_eigs(n_real_eigsSEXP);
    Rcpp::traits::input_parameter< bool >::type initial_calc(initial_calcSEXP);
    buildEigenArray_SEIR(real_eigenvals, imag_eigenvals, eigenvecs, inversevecs, irm_array, n_real_eigs, initial_calc);
    return R_NilValue;
END_RCPP
}
// buildEigenArray
void buildEigenArray(arma::mat& real_eigenvals, arma::mat& imag_eigenvals, arma::cube& eigenvecs, arma::cube& inversevecs, arma::cube& irm_array, Rcpp::IntegerVector& n_real_eigs);
RcppExport SEXP BDAepimodel_buildEigenArray(SEXP real_eigenvalsSEXP, SEXP imag_eigenvalsSEXP, SEXP eigenvecsSEXP, SEXP inversevecsSEXP, SEXP irm_arraySEXP, SEXP n_real_eigsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type real_eigenvals(real_eigenvalsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type imag_eigenvals(imag_eigenvalsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type eigenvecs(eigenvecsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type inversevecs(inversevecsSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type irm_array(irm_arraySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type n_real_eigs(n_real_eigsSEXP);
    buildEigenArray(real_eigenvals, imag_eigenvals, eigenvecs, inversevecs, irm_array, n_real_eigs);
    return R_NilValue;
END_RCPP
}
// buildFBMats
void buildFBMats(Rcpp::NumericVector& fb_mats, Rcpp::NumericVector& tpm_prods, arma::mat& emit_mat, arma::vec& initdist, Rcpp::IntegerVector& obs_time_inds);
RcppExport SEXP BDAepimodel_buildFBMats(SEXP fb_matsSEXP, SEXP tpm_prodsSEXP, SEXP emit_matSEXP, SEXP initdistSEXP, SEXP obs_time_indsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type fb_mats(fb_matsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type tpm_prods(tpm_prodsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type emit_mat(emit_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type initdist(initdistSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type obs_time_inds(obs_time_indsSEXP);
    buildFBMats(fb_mats, tpm_prods, emit_mat, initdist, obs_time_inds);
    return R_NilValue;
END_RCPP
}
// buildRateArray
void buildRateArray(Rcpp::NumericVector& irm_array, const Rcpp::NumericMatrix& rates, const Rcpp::NumericMatrix& flow_inds);
RcppExport SEXP BDAepimodel_buildRateArray(SEXP irm_arraySEXP, SEXP ratesSEXP, SEXP flow_indsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type irm_array(irm_arraySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type rates(ratesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type flow_inds(flow_indsSEXP);
    buildRateArray(irm_array, rates, flow_inds);
    return R_NilValue;
END_RCPP
}
// getObsTimeInds
Rcpp::IntegerVector getObsTimeInds(const Rcpp::NumericMatrix& pop_mat, const Rcpp::NumericVector& obstimes);
RcppExport SEXP BDAepimodel_getObsTimeInds(SEXP pop_matSEXP, SEXP obstimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type pop_mat(pop_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type obstimes(obstimesSEXP);
    rcpp_result_gen = Rcpp::wrap(getObsTimeInds(pop_mat, obstimes));
    return rcpp_result_gen;
END_RCPP
}
// insertPath
void insertPath(const Rcpp::NumericMatrix& path, const int subject, Rcpp::NumericMatrix& pop_mat, Rcpp::IntegerVector& subj_path, int& ind);
RcppExport SEXP BDAepimodel_insertPath(SEXP pathSEXP, SEXP subjectSEXP, SEXP pop_matSEXP, SEXP subj_pathSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< const int >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type pop_mat(pop_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type subj_path(subj_pathSEXP);
    Rcpp::traits::input_parameter< int& >::type ind(indSEXP);
    insertPath(path, subject, pop_mat, subj_path, ind);
    return R_NilValue;
END_RCPP
}
// joinCubes
arma::cube joinCubes(Rcpp::NumericVector& firstcube, Rcpp::NumericVector& secondcube);
RcppExport SEXP BDAepimodel_joinCubes(SEXP firstcubeSEXP, SEXP secondcubeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type firstcube(firstcubeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type secondcube(secondcubeSEXP);
    rcpp_result_gen = Rcpp::wrap(joinCubes(firstcube, secondcube));
    return rcpp_result_gen;
END_RCPP
}
// populationLikelihood
double populationLikelihood(const arma::mat& pop_mat, Rcpp::NumericVector& irm_array, const arma::vec& initdist, const arma::uvec& initdist_param_inds, const arma::umat& flow_inds, const arma::uvec& keys, const arma::uvec& inds, bool loglik);
RcppExport SEXP BDAepimodel_populationLikelihood(SEXP pop_matSEXP, SEXP irm_arraySEXP, SEXP initdistSEXP, SEXP initdist_param_indsSEXP, SEXP flow_indsSEXP, SEXP keysSEXP, SEXP indsSEXP, SEXP loglikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pop_mat(pop_matSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type irm_array(irm_arraySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initdist(initdistSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type initdist_param_inds(initdist_param_indsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type flow_inds(flow_indsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< bool >::type loglik(loglikSEXP);
    rcpp_result_gen = Rcpp::wrap(populationLikelihood(pop_mat, irm_array, initdist, initdist_param_inds, flow_inds, keys, inds, loglik));
    return rcpp_result_gen;
END_RCPP
}
// reorderMat
arma::mat reorderMat(Rcpp::NumericMatrix& oldmtx, const arma::uvec& ord);
RcppExport SEXP BDAepimodel_reorderMat(SEXP oldmtxSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type oldmtx(oldmtxSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ord(ordSEXP);
    rcpp_result_gen = Rcpp::wrap(reorderMat(oldmtx, ord));
    return rcpp_result_gen;
END_RCPP
}
// resolveSubjContrib
void resolveSubjContrib(Rcpp::NumericMatrix& pop_mat, const int ind_final_config, const Rcpp::IntegerVector& subj_path, bool insertion);
RcppExport SEXP BDAepimodel_resolveSubjContrib(SEXP pop_matSEXP, SEXP ind_final_configSEXP, SEXP subj_pathSEXP, SEXP insertionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type pop_mat(pop_matSEXP);
    Rcpp::traits::input_parameter< const int >::type ind_final_config(ind_final_configSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type subj_path(subj_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type insertion(insertionSEXP);
    resolveSubjContrib(pop_mat, ind_final_config, subj_path, insertion);
    return R_NilValue;
END_RCPP
}
// retrieveKeys
arma::uvec retrieveKeys(const arma::uvec inds, const arma::mat& irm_lookup, const arma::mat& pop_mat, const arma::vec& index_state_num);
RcppExport SEXP BDAepimodel_retrieveKeys(SEXP indsSEXP, SEXP irm_lookupSEXP, SEXP pop_matSEXP, SEXP index_state_numSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type irm_lookup(irm_lookupSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pop_mat(pop_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type index_state_num(index_state_numSEXP);
    rcpp_result_gen = Rcpp::wrap(retrieveKeys(inds, irm_lookup, pop_mat, index_state_num));
    return rcpp_result_gen;
END_RCPP
}
// retrieveSubjPath
void retrieveSubjPath(Rcpp::IntegerVector& subj_path, const int subject, const Rcpp::NumericMatrix& pop_mat, const Rcpp::IntegerVector& init_config, const int ind_final_config, const Rcpp::IntegerMatrix flow_inds);
RcppExport SEXP BDAepimodel_retrieveSubjPath(SEXP subj_pathSEXP, SEXP subjectSEXP, SEXP pop_matSEXP, SEXP init_configSEXP, SEXP ind_final_configSEXP, SEXP flow_indsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type subj_path(subj_pathSEXP);
    Rcpp::traits::input_parameter< const int >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type pop_mat(pop_matSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type init_config(init_configSEXP);
    Rcpp::traits::input_parameter< const int >::type ind_final_config(ind_final_configSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type flow_inds(flow_indsSEXP);
    retrieveSubjPath(subj_path, subject, pop_mat, init_config, ind_final_config, flow_inds);
    return R_NilValue;
END_RCPP
}
// sampleEventSubseq
Rcpp::IntegerVector sampleEventSubseq(Rcpp::IntegerVector& path, Rcpp::NumericVector& tpms, Rcpp::NumericVector& tpm_prods, const int init_ind, const int final_ind);
RcppExport SEXP BDAepimodel_sampleEventSubseq(SEXP pathSEXP, SEXP tpmsSEXP, SEXP tpm_prodsSEXP, SEXP init_indSEXP, SEXP final_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type tpms(tpmsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type tpm_prods(tpm_prodsSEXP);
    Rcpp::traits::input_parameter< const int >::type init_ind(init_indSEXP);
    Rcpp::traits::input_parameter< const int >::type final_ind(final_indSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleEventSubseq(path, tpms, tpm_prods, init_ind, final_ind));
    return rcpp_result_gen;
END_RCPP
}
// simulateSIR
Rcpp::NumericMatrix simulateSIR(Rcpp::NumericVector obstimes, Rcpp::NumericVector params, Rcpp::IntegerVector init_config);
RcppExport SEXP BDAepimodel_simulateSIR(SEXP obstimesSEXP, SEXP paramsSEXP, SEXP init_configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type obstimes(obstimesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type init_config(init_configSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateSIR(obstimes, params, init_config));
    return rcpp_result_gen;
END_RCPP
}
// subjectLikelihood
double subjectLikelihood(const int subject, const arma::mat& pop_mat, const arma::uvec& subj_path, Rcpp::NumericVector& irm_array, const Rcpp::NumericVector& initdist, const Rcpp::IntegerVector& keys, bool loglik);
RcppExport SEXP BDAepimodel_subjectLikelihood(SEXP subjectSEXP, SEXP pop_matSEXP, SEXP subj_pathSEXP, SEXP irm_arraySEXP, SEXP initdistSEXP, SEXP keysSEXP, SEXP loglikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pop_mat(pop_matSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type subj_path(subj_pathSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type irm_array(irm_arraySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type initdist(initdistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< bool >::type loglik(loglikSEXP);
    rcpp_result_gen = Rcpp::wrap(subjectLikelihood(subject, pop_mat, subj_path, irm_array, initdist, keys, loglik));
    return rcpp_result_gen;
END_RCPP
}
// tpmProdSeqs
void tpmProdSeqs(Rcpp::NumericVector& tpm_prods, Rcpp::NumericVector& tpms, const Rcpp::IntegerVector obs_time_inds);
RcppExport SEXP BDAepimodel_tpmProdSeqs(SEXP tpm_prodsSEXP, SEXP tpmsSEXP, SEXP obs_time_indsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type tpm_prods(tpm_prodsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type tpms(tpmsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type obs_time_inds(obs_time_indsSEXP);
    tpmProdSeqs(tpm_prods, tpms, obs_time_inds);
    return R_NilValue;
END_RCPP
}
// complexTPM
arma::mat complexTPM(const arma::vec& real_vals, const arma::vec& imag_vals, const arma::mat& vecs, const arma::mat& inv_vecs, double dt, int n_real);
RcppExport SEXP BDAepimodel_complexTPM(SEXP real_valsSEXP, SEXP imag_valsSEXP, SEXP vecsSEXP, SEXP inv_vecsSEXP, SEXP dtSEXP, SEXP n_realSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type real_vals(real_valsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type imag_vals(imag_valsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vecs(vecsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inv_vecs(inv_vecsSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< int >::type n_real(n_realSEXP);
    rcpp_result_gen = Rcpp::wrap(complexTPM(real_vals, imag_vals, vecs, inv_vecs, dt, n_real));
    return rcpp_result_gen;
END_RCPP
}
// tpmSeqs
void tpmSeqs(arma::cube& tpms, const arma::mat& pop_mat, const arma::mat& real_eigen_vals, const arma::mat& imag_eigen_vals, const arma::cube& eigen_vecs, const arma::cube& inverse_vecs, const Rcpp::IntegerVector& irm_keys, const Rcpp::IntegerVector& n_real_eigs, const arma::cube& irms);
RcppExport SEXP BDAepimodel_tpmSeqs(SEXP tpmsSEXP, SEXP pop_matSEXP, SEXP real_eigen_valsSEXP, SEXP imag_eigen_valsSEXP, SEXP eigen_vecsSEXP, SEXP inverse_vecsSEXP, SEXP irm_keysSEXP, SEXP n_real_eigsSEXP, SEXP irmsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type tpms(tpmsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pop_mat(pop_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type real_eigen_vals(real_eigen_valsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type imag_eigen_vals(imag_eigen_valsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type eigen_vecs(eigen_vecsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type inverse_vecs(inverse_vecsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type irm_keys(irm_keysSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type n_real_eigs(n_real_eigsSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type irms(irmsSEXP);
    tpmSeqs(tpms, pop_mat, real_eigen_vals, imag_eigen_vals, eigen_vecs, inverse_vecs, irm_keys, n_real_eigs, irms);
    return R_NilValue;
END_RCPP
}
